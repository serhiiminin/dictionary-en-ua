// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Notifications render empty 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Notifications
    classes={Object {}}
    hideNotification={[Function]}
    notifications={Array []}
>
    children
</Notifications>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        "children",
        <ul
          className={undefined}
>
          
</ul>,
      ],
    },
    "ref": null,
    "rendered": Array [
      "children",
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [],
          "className": undefined,
        },
        "ref": null,
        "rendered": Array [],
        "type": "ul",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          "children",
          <ul
            className={undefined}
>
            
</ul>,
        ],
      },
      "ref": null,
      "rendered": Array [
        "children",
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [],
            "className": undefined,
          },
          "ref": null,
          "rendered": Array [],
          "type": "ul",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`Notifications render with one item 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Notifications
    classes={Object {}}
    hideNotification={[Function]}
    notifications={
        Array [
            Object {
              "id": "id",
              "text": "text",
              "type": "success",
            },
          ]
    }
>
    children
</Notifications>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        "children",
        <ul
          className={undefined}
>
          <Jss(NotificationItem)
                    onClick={[Function]}
                    status="entering"
                    text="text"
                    type="success"
          />
</ul>,
      ],
    },
    "ref": null,
    "rendered": Array [
      "children",
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Jss(NotificationItem)
              onClick={[Function]}
              status="entering"
              text="text"
              type="success"
/>,
          ],
          "className": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "id",
            "nodeType": "class",
            "props": Object {
              "onClick": [Function],
              "status": "entering",
              "text": "text",
              "type": "success",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "ul",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          "children",
          <ul
            className={undefined}
>
            <Jss(NotificationItem)
                        onClick={[Function]}
                        status="entering"
                        text="text"
                        type="success"
            />
</ul>,
        ],
      },
      "ref": null,
      "rendered": Array [
        "children",
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Jss(NotificationItem)
                onClick={[Function]}
                status="entering"
                text="text"
                type="success"
/>,
            ],
            "className": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "id",
              "nodeType": "class",
              "props": Object {
                "onClick": [Function],
                "status": "entering",
                "text": "text",
                "type": "success",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "ul",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
